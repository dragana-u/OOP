//Define a classDonationAction that stores information for:
//name (dynamically allocated array of chars),
//id number (char array),
//collected fund value (integer),
//needed fund value (integer)
//For this class implement (15 points):
//constructors, destructor and the needed get-functions (see the main function for calls)
//operator<< for printing the data in the following format:
//idnumber name X more denars are needed, if the needed fund is not collected, where X=neededfundvalue â€“ collectedfundvalue
//idnumber name collected, if the needed fund is collected
//operator+= - to add a given integer to the collected fund value
//operator < - to compare two donation actions by the needed fund value that is not collected 
//(the difference between the needed and collected fund value). If two donation actions are needed the same fund value, the actions are compared by their id number.
//The id number must be string with at most 9 digits. In this class an exception should be thrown if there is an error 
//in the id number. Two types of errors can be found: the id number contains characters that are not digits or the 
//id number could have more than 9 digits. In the main function write a code segment that will handle with these exceptions and 
//write an appropriate message when an error occurs : The id number has a non-digit character or The id number has more than 9 
//characters, accordingly. If one id number has both types of error write the second message. (10 points)
//Define a class DonationSociety that stores information for:
//name of the president of the society (char array, max 30)
//dynamically allocated array of objects of class DonationAction
//number of donation actions (integer)
//For this class implement (25 points):
//constructs and desctructor (see the calls in the main function)
//functionbool takeDonation (char id[], int donatedFund) that takes donatedFund for the donation 
//action with an id number id. The function will return true if the donation is taken. 
//The donation will be taken if the assigned id number exists and in this case the value for 
//the collected fund of the action with the given id will be updated.
//operator+= to add a new donation action in the array of donation actions, but only if there 
//does not already exists a donation actions with the same id number. In all other cases the donation actions is not added.
//operator<< for printing the all donation actions sorted in decreasing order according to the comparison defined with 
//the operator <. In the end, in the last row print:
//President: name

#include<iostream>
#include <cstring>
using namespace std;

class InvalidID{
private:
    char message[100];
public:
    InvalidID(char *message=""){
        strcpy(this->message,message);
    }
    void show(){
        cout<<message<<endl;
    }
};

class DonaciskiApel{
private:
    char *name;
    char idNum[100];
    int needFundValue;
    int collectFundValue;
    void copy(const DonaciskiApel &other){
        this->name=new char[strlen(other.name)+1];
        strcpy(this->name,other.name);
        strcpy(this->idNum,other.idNum);
        this->needFundValue=other.needFundValue;
        this->collectFundValue=other.collectFundValue;
    }
public:
    DonaciskiApel(){
        this->name=new char[0];
        strcpy(this->idNum,"0");
        this->needFundValue=0;
        this->collectFundValue=0;
    }
    DonaciskiApel(const DonaciskiApel &other){
        copy(other);
    }
    DonaciskiApel & operator=(const DonaciskiApel &other){
        if(this!=&other){
            copy(other);
        }
        return *this;
    }
    char *getIdNum() {
        return idNum;
    }

    void setCollectFundValue(int collectFundValue) {
        DonaciskiApel::collectFundValue = collectFundValue;
    }

    DonaciskiApel(char *name, char *idNum, int needFundValue){

            if(strlen(idNum)>9){
                throw InvalidID("The id number has more than 9 characters\0");
            }
            for(int i=0;i<strlen(idNum);i++) {
                if(isalpha(idNum[i])){
                    throw InvalidID("The id number has a non-digit character");
                }
            }

        strcpy(this->idNum,idNum);
        this->collectFundValue=0;
        this->needFundValue=needFundValue;
        this->name=new char[strlen(name)+1];
        strcpy(this->name,name);

    }

    friend ostream &operator<<(ostream &os,DonaciskiApel &apel) {
        os<<apel.idNum<<" "<<apel.name;
        if(apel.collectFundValue<apel.needFundValue){
            os<<" "<<apel.needFundValue-apel.collectFundValue<<" more denars are needed";
        }else{
            os<<" "<<"collected";
        }
        return os;
    }
    DonaciskiApel &operator+=(int nov){
        collectFundValue+=nov;
        return *this;
    }

    bool operator<(DonaciskiApel &rhs){
       bool sporedba=(needFundValue-collectFundValue)==(rhs.needFundValue-rhs.collectFundValue);
       if(sporedba){
           return strcmp(idNum,rhs.idNum);
       }else{
           return (needFundValue-collectFundValue)<(rhs.needFundValue-rhs.collectFundValue);
       }
    }
};

class DonaciskoDrustvo{
private:
    char namePresident[30];
    DonaciskiApel *da;
    int num;
    void copy(const DonaciskoDrustvo &other){
        this->num=other.num;
        strcpy(namePresident,other.namePresident);
        this->da=new DonaciskiApel[other.num];
        for(int i=0;i<num;i++){
            this->da[i]=other.da[i];
        }
    }
public:
    DonaciskoDrustvo(){
        this->num=0;
        strcpy(namePresident,"p");
        this->da=new DonaciskiApel[0];
    }
    DonaciskoDrustvo(char *namePresident) {
        strcpy(this->namePresident,namePresident);
        this->num=0;
        this->da=new DonaciskiApel[0];
    }
    ~DonaciskoDrustvo(){
        delete [] da;
    }
    DonaciskoDrustvo(const DonaciskoDrustvo &other){
        copy(other);
    }
    DonaciskoDrustvo &operator=(const DonaciskoDrustvo &other){
        if(this!=&other){
            delete [] da;
            copy(other);
        }
        return *this;
    }
    bool primiiDonacija(char string[50], int donated) {
        for(int i=0;i<num;i++){
            if(strcmp(da[i].getIdNum(),string)==0){
                da[i]+=donated;
                return true;
            }
        }
        return false;
    }
    DonaciskoDrustvo & operator+=(DonaciskiApel &nov){
        for(int i=0;i<num;i++){
            if(strcmp(da[i].getIdNum(),nov.getIdNum())==0){
                return *this;
            }
        }
        DonaciskiApel * temp = new DonaciskiApel[num+1];
        for(int i=0;i<num;i++){
            temp[i]=da[i];
        }
        temp[num++]=nov;
        delete [] da;
        da = temp;
        return *this;
    }

    friend ostream &operator<<(ostream &os, const DonaciskoDrustvo &drustvo) {
        DonaciskiApel *temp = new DonaciskiApel[drustvo.num];
        for(int i=0;i<drustvo.num;i++){
            temp[i]=drustvo.da[i];
        }
        for(int i=0;i<drustvo.num-1;i++){
            for(int j=i+1;j<drustvo.num;j++){
                if(temp[i]<temp[j]){
                    DonaciskiApel smeni = temp[i];
                    temp[i]=temp[j];
                    temp[j]=smeni;
                }
            }
        }
        for(int i=0;i<drustvo.num;i++){
            os<<temp[i];
            if(i!=drustvo.num-1){
                os<<endl;
            }
        }
        os<<endl;
        os<<"President:"<<drustvo.namePresident<<endl;
        return os;
    }
};

int main(){


    DonaciskoDrustvo donacii("Velko Velkovski");
    int n;
    char naziv[50],id[50];
    int potrebnasuma,doniranasuma;
    cin>>n;

    for (int i=0;i<n;i++){
        cin.get();
        cin.getline(naziv,50);
        cin>>id>>potrebnasuma;

        try {
            DonaciskiApel edna(naziv, id, potrebnasuma);
            donacii += edna;
        }
        catch (InvalidID &e){
            e.show();
        }
    }

    //donation
    cin>>n;
    for (int i=0;i<n;i++){

        cin>>id>>doniranasuma;

        if(!donacii.primiiDonacija(id,doniranasuma))
            cout<<"The donation is not taken. Wrong ID."<<endl;
    }
    cout<<"==============="<<endl;
    cout<<donacii;

}
