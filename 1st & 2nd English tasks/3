//Implement a class for Character that holds single char variable with the needed constructors. (5 points)
//Then implement a class CharSequence that holds dynamically allocated array of objects of 
//class Character and the length of the array. (5 points) This class should implement needed 
//constructors and destructor (10 points) and the following methods and operators:
//CharSequenc& operator[](int i) for accessing the i-th element of the sequence. (5 points)
//CharSequence& operator +=(const Character &c) for adding new Character object. 
//To add the new object, expand the dynamically allocated array for +1. (10 points)
//bool operator==(const CharSequence &cs) that will compare two CharSequence objects. 
//Two objects are equal if they have equal arrays of Character objects, and two Character objects are equal if they hold equal character. (5 points)
//int operator[](char c) that will return how many times the character c apears in the CharSequence object. (5 points)
//CharSequence toUpperCase() that will return a new CharSequence object, where all characters will be in lowercase. (10 points)
//For both classes implement the operator << for printing the contents to the standard output. (5 points)

#include <iostream>
#include <cstring>
using namespace std;

class Character{
private:
    char var;
    void copy(const Character &other){
        this->var=other.var;
    }
public:
    Character(char var='A'){
        this->var=var;
    }
    Character(const Character &other){
        copy(other);
    }
    Character & operator=(const Character &other){
        if(this!=&other){
            copy(other);
        }
        return *this;
    }
    friend ostream &operator<<(ostream &os, const Character &character) {
        os <<character.var;
        return os;
    }
    void setChar(char var){
        Character::var = var;
    }

    char getChar() {
        return var;
    }
};

class CharSequence{
    Character *chars;
    int num;
    void copy(const CharSequence &other){
        this->num=other.num;
        this->chars=new Character[num];
        for(int i=0;i<num;i++){
            this->chars[i]=other.chars[i];
        }
    }
public:
    CharSequence(){
        this->chars=new Character[0];
        this->num=0;
    }
    CharSequence(char *word){
       this->chars=new Character[strlen(word)+1];
       for(int i=0;i<strlen(word);i++){
           this->chars[i].setChar(word[i]);
       }
       this->num=strlen(word);
    }
    ~CharSequence(){
        delete [] chars;
    }
    CharSequence(const CharSequence &other){
        copy(other);
    }
    CharSequence & operator=(const CharSequence &other){
        if(this!=&other){
            delete [] chars;
            copy(other);
        }
        return *this;
    }

    friend ostream &operator<<(ostream &os, const CharSequence &sequence) {
        for(int i=0;i<sequence.num;i++){
            os<<sequence.chars[i];
        }
        return os;
    }
    Character& operator[](int i){
        if(i<0 || i>=num){
            Character character;
            return character;
        }
        return chars[i];
    }
    CharSequence&operator+=(const Character &nov){
        Character *temp=new Character[num+1];
        for(int i=0;i<num;i++){
            temp[i]=chars[i];
        }
        temp[num++]=nov;
        delete [] chars;
        chars=temp;
        return *this;
    }
    bool operator ==(const CharSequence &cs){
        if(cs.num==num){
            for(int i=0;i<num;i++){
                if(chars[i].getChar()==cs.chars->getChar()){
                    return true;
                }else{
                    return false;
                }
            }
        }
        return false;
    }
    CharSequence toUpperCase(){
        CharSequence n;
        for(int i=0;i<num;i++){
            n+=(char)toupper(chars[i].getChar());
        }
        return n;
    }
    int operator[](char c){
        int br=0;
        for(int i=0;i<num;i++){
            if(chars[i].getChar()==c){
                br++;
            }
        }
        return br;
    }
};

int main() {
    int n;
    cin >> n;

    if(n == 1) {
        cout << "Testing Character class" << endl;
        cout << "Character constructor" << endl;
        char c;
        cin >> c;
        Character cc(c);
        cout << "OK" << endl;
        cout << "Character operator <<" << endl;
        cout << cc << endl;
    } else if(n == 2) {
        cout << "Testing CharSequence constructors" << endl;
        char word[100];
        cin >> word;
        CharSequence cs1(word);
        cout << cs1 << endl;
    } else if(n == 3) {
        cout << "Testing CharSequence copy constructor and operator[int]" << endl;
        CharSequence cs("Some sequence");
        CharSequence copy(cs);
        cs[0] = 'X';
        cout << "Original: " << cs << endl;
        cout << "Copy: " << copy << endl;
    } else if(n == 4) {
        cout << "Testing CharSequence =operator and operator[int]" << endl;
        CharSequence cs("Some sequence");
        CharSequence copy;
        copy = cs;
        cs[0] = 'X';
        cout << "Original: " << cs << endl;
        cout << "Copy: " << copy << endl;
    } else if(n == 5) {
        cout << "Testing CharSequence operator+=" << endl;
        CharSequence cs;
        char word[100];
        cin >> word;
        int len = strlen(word);
        for(int i = 0; i < len; ++i) {
            cs += Character(word[i]);
        }
        cout << cs << endl;
    } else if(n == 6) {
        cout << "Testing CharSequence operator[char]" << endl;
        CharSequence cs("If you don't read the newspaper, you're uninformed. If you read the newspaper, you're mis-informed.");
        cout << cs['e'] << endl;
    } else if(n == 7) {
        cout << "Testing CharSequence toUpperCase" << endl;
        CharSequence cs("If you tell the truth, you don't have to remember anything");
        cout << cs.toUpperCase() << endl;
    } else if(n == 8) {
        cout << "Testing CharSequence operator ==" << endl;
        CharSequence cs1("abc");
        CharSequence cs2("abc");
        CharSequence cs3("abcd");
        CharSequence cs4("xyz");
        cout << (cs1 == cs2) << endl;
        cout << (cs1 == cs3) << endl;
        cout << (cs2 == cs4) << endl;
    }

    return 0;
}

