Implement class AlcoholicDrink that has info for:
//name (max of 100 chars),
//country of origin (max of 100 chars),
//percent of alcohol (float),
//        base price (float).
//One company have two kinds of alcoholic
//        drinks that should be defined in two separate classes: Beer and Wine.
//For beer additionally keep info for the main ingredient (two possibilities: barley/wheat),
//and for wines keep the year of manufacturing (integer) and grapes type (max of 20 chars).
//Implement in the classes:
//needed constructors and destructors (see the usage in the main function) (5 points)
//operator <<for printing the alcoholic drinks in format: (5 points)
//name country_of_origin computed_price
//        operator < for comparing two alcoholic drinks from any kind by their computed price (5 points)
//method float computePrice() for computing the price of different kind of alcoholic drinks on the following way: (10 points)
//for Beer - the price is increased for 5% of the base price if the beer is originated from "Germany" and for 10% of the base price if it is made from wheat
//for Wine - the price is increased for 5% of the base price if the wine is originated from "Italy" and for 15% of the base price if the it
//is manufactured before 2005
//Implement global function void lowestPrice(AlcoholicDrink ** Ð°, int n) that will print the alcoholic drink with lowest price. (10 points)
//In the class AlcoholicDrink is kept an integer which is same for all alcoholic drinks and represents the discount for these products.
//The initial value of this variable is 5. To work with this variable implement the following static methods: (5 points)
//void changeDiscount(int d) to change the discount
//void total(AlcoholicDrink** ad, int n) that prints the total price of all alcoholic drinks and the total price with discount.

#include <iostream>
#include <cstring>
using namespace std;

class AlcoholicDrink{
protected:
    char name[100];
    char country[100];
    float percentAlc;
    float basePrice;
    static int DISCOUNT;
public:
    AlcoholicDrink(float percentAlc=0.0,char *name="", char *country="", float basePrice=0.0){
        strcpy(this->name,name);
        strcpy(this->country,country);
        this->percentAlc=percentAlc;
        this->basePrice=basePrice;
    }
    virtual float computePrice(){
        return basePrice;
    }

    friend ostream &operator<<(ostream &os,AlcoholicDrink &drink) {
        os<<drink.name<<" "<<drink.country<<" "<<drink.computePrice();
        return os;
    }

    bool operator<(AlcoholicDrink &rhs){
        return computePrice() < rhs.computePrice();
    }
    static void changeDiscount(int d){
        DISCOUNT=d;
    }
    static void total(AlcoholicDrink** ad, int n){
        float total=0.0;
        for(int i=0;i<n;i++){
            total+=ad[i]->computePrice();
        }
        cout<<"Total price: "<<total<<endl;
        cout<<"Total price with discount: "<<total-total*(DISCOUNT/100.0)<<endl;
    }
};

int AlcoholicDrink::DISCOUNT=5;

class Beer : public AlcoholicDrink{
private:
    bool type;
public:
    Beer(float percentAlc=0.0,char *name="", char *country="", float basePrice=0.0, bool type= false) : AlcoholicDrink(percentAlc,name,country,basePrice)
                                                                                     {
        this->type=type;
    }

    float computePrice(){
        float newPrice=AlcoholicDrink::computePrice();
        if(strcmp(country,"Germany")==0){
            newPrice= newPrice * (5.0/100) + newPrice;
        }
        if(!type){
            newPrice = newPrice * (10.0/100) + newPrice;
        }
        return newPrice;
    }

    friend ostream &operator<<(ostream &os, Beer &drink) {
        os<<drink.name<<" "<<drink.country<<" "<<drink.computePrice();
        return os;
    }
};

class Wine : public AlcoholicDrink{
private:
    int year;
    char grapeType[20];
public:
    Wine(float percentAlc=0.0, char *name="", char *country="", float basePrice=0.0, int year=0, char *grapeType="") : AlcoholicDrink(
            percentAlc, name, country, basePrice){
        this->year=year;
        strcpy(this->grapeType,grapeType);
    }
    float computePrice(){
        float newPrice=AlcoholicDrink::computePrice();
        if(strcmp(country,"Italy")==0){
            newPrice= newPrice * (5.0/100) + newPrice;
        }
        if(year<2005){
            newPrice= newPrice * (15.0/100) + newPrice;
        }
        return newPrice;
    }
    friend ostream &operator<<(ostream &os,Wine &drink) {
        os<<drink.name<<" "<<drink.country<<" "<<drink.computePrice();
        return os;
    }
};

void  lowestPrice(AlcoholicDrink** pAlcoholicDrink, int n){
    float min=pAlcoholicDrink[0]->computePrice();
    int najI=0;
    for(int i=0;i<n;i++){
        if(pAlcoholicDrink[i]->computePrice()<min){
            min=pAlcoholicDrink[i]->computePrice();
            najI=i;
        }
    }
    cout<<*pAlcoholicDrink[najI];
}

int main() {
    int testCase;
    cin >> testCase;
    float p;
    char name[100];
    char country[100];
    float price;
    bool mainI;
    int year;
    char grape [20];
    if(testCase == 1) {
        cout << "===== TESTING CONSTRUCTORS ======" << endl;
        cin >> p;
        cin >> name;
        cin >> country;
        cin >> price;
        cin >> mainI;
        Beer b(p, name, country, price, mainI);
        cout << b << endl;
        cin >> p;
        cin >> name;
        cin >> country;
        cin >> price;
        cin >> year;
        cin >> grape;
        Wine w(p, name, country, price, year, grape);
        cout << w << endl;

    } else if(testCase == 2) {
        cout << "===== TESTING LOWEST PRICE ======" << endl;
        int n;
        cin >> n;
        AlcoholicDrink** ad = new AlcoholicDrink*[n];
        for(int i = 0; i < n; ++i) {
            cin >> p;
            cin >> name;
            cin >> country;
            cin >> price;

            if(i % 2 == 1){
                cin >> mainI;
                ad[i] = new Beer(p, name, country, price, mainI);
            }
            else {
                cin >> year;
                cin >> grape;
                ad[i] = new Wine(p, name, country, price, year, grape);
            }
        }

        lowestPrice(ad, n);
        for(int i = 0; i < n; ++i) {
            delete ad[i];
        }
        delete [] ad;
    } else if(testCase == 3) {
        cout << "===== TESTING DISCOUNT STATIC ======" << endl;
        int n;
        cin >> n;
        AlcoholicDrink** ad = new AlcoholicDrink*[n];
        for(int i = 0; i < n; ++i) {
            cin >> p;
            cin >> name;
            cin >> country;
            cin >> price;
            if(i % 2 == 1){
                cin >> mainI;
                ad[i] = new Beer(p, name, country, price, mainI);
            }
            else {
                cin >> year;
                cin >> grape;
                ad[i] = new Wine(p, name, country, price, year, grape);
            }
        }
        AlcoholicDrink::total(ad, n);
        int d;
        cin >> d;
        AlcoholicDrink::changeDiscount(d);
        AlcoholicDrink::total(ad, n);
        for(int i = 0; i < n; ++i) {
            delete ad[i];
        }
        delete [] ad;
    }

}

