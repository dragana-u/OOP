//Create a Race class. Each race is represented by the following information:
//the name of the city in which it is performed (array of up to 40 characters)
//year (integer)
//month (integer)
//best time in seconds (float)
//length in km (float)
//For this class, implement the following methods:
//method complexity() that calculates the complexity of the race according to the following formula:
//best time in seconds / length in km
//operator << for printing the race in the following format:
//[City] [month] [year] [complexity]
//Create a MotoGPRace class that, besides with the basic information about the race, additionally is represented by the following information:
//array of best times of preparation (dynamically allocated array of float numbers)
//the number of best times (integer)
//number of laps (integer)
//In this class, override the complexity() method so that the average of the best times of 
//the preparations multiplied by the MotoGP coefficient will be added to the initial complexity of the race. 
//MotoGP coefficient is the same for all MotoGP races and can be changed by the commission (the initial value is 0.4). 
//Additionally, if the number of laps is greater than 22, the complexity is increased by 20%.
//For this class, provide the following methods:
//operator += - to add a new time of preparation to the dynamically allocated array of the best times of preparation. 
//If an attempt is made to add a value less than 9.5, throw an exception (an object of the 'InvalidTimeException' class). 
//The exception handling should be performed in the main function on the appropriate place. If an exception was thrown, an appropriate error message 
//"Invalid Time" should be printed, and this value should not be entered in the array.
//Operator ++ in postfix notation - to increase the number of laps by one for a given MotoGpRace.
//Provide all the necessary functions for the proper functioning of the program.

#include<iostream>
#include<string.h>
using namespace std;

//your code here
class InvalidTime{
public:
    InvalidTime(){}
    void print(){
        cout<<"Invalid Time"<<endl;
    }
};

class Race{
protected:
    char city[50];
    int year;
    int month;
    float bestTimeSeconds;
    float lengthKm;
public:
    Race(char *city="", int year=0, int month=0, float bestTimeSeconds=1.0, float lengthKm=1.0) :year(year), month(month),
                                                                                   bestTimeSeconds(bestTimeSeconds),
                                                                                   lengthKm(lengthKm) {
        strcpy(this->city,city);
    }
    virtual float complexity(){
        return bestTimeSeconds/lengthKm;
    }

    friend ostream &operator<<(ostream &os, Race &race) {
        os << race.city << " " << race.month << "." << race.year<<" "<<race.complexity()<<endl;
        return os;
    }
};

class MotoGPRace : public Race{
private:
    float *bestTimes;
    int numArray;
    int numLaps;
    static float COEF;
public:
    MotoGPRace(char *city="", int year=0, int month=0, float bestTimeSeconds=1.0, float lengthKm=1.0,float *bestTimes=nullptr,
               int numArray=0,int numLaps=0) : Race(city,year,month,bestTimeSeconds,lengthKm){
        this->numArray=numArray;
        this->numLaps=numLaps;
        this->bestTimes=new float [numArray];
        for(int i=0;i<numArray;i++){
            this->bestTimes[i]=bestTimes[i];
        }
    }
    float complexity(){
        float average=0.0;
        for(int i=0;i<numArray;i++){
            average+=bestTimes[i];
        }
        average/=(float)numArray;
        float total = average*COEF+Race::complexity();
        if(numLaps>22){
            return total*(20.0/100)+total;
        }else{
            return total;
        }
    }
    MotoGPRace & operator+=(float nov){
        if(nov<9.5){
            throw InvalidTime();
        }
        float *temp = new float [numArray+1];
        for(int i=0;i<numArray;i++){
            temp[i]=bestTimes[i];
        }
        temp[numArray++]=nov;
        delete [] bestTimes;
        bestTimes=temp;
        return *this;
    }
//    ~MotoGPRace(){
//        delete [] bestTimes;
//    }
    static void setK(float cf){
        COEF=cf;
    }
    void setNumberLaps(int num){
        numLaps=num;
    }
    MotoGPRace operator++(int) {
        MotoGPRace result(*this);
        ++numLaps;
        return result;
    }
    int getNumberLaps(){
        return numLaps;
    }
};
float MotoGPRace::COEF=0.4;
int main(){
    int testCase;
    cin >> testCase;
    char city[50];
    int year;
    int month;
    float bestTime;
    float length;
    float bestTimes[50];
    int n;
    int m;
    int choice;
    int numberLaps;

    if (testCase == 1){
        cout << "===== Testing - classes ======" << endl;
        cin >> city;
        cin >> year;
        cin >> month;
        cin >> bestTime;
        cin>>length;
        Race t(city, year, month, bestTime, length);
        cout<<t;
        cin >> city;
        cin >> year;
        cin >> month;
        cin >> bestTime;
        cin>>length;
        cin>>numberLaps;
        cin>>n;
        for (int j = 0; j < n; j++)
            cin >> bestTimes[j];
        MotoGPRace mgt(city, year, month, bestTime, length,bestTimes, n, numberLaps);
        cout << mgt;
        MotoGPRace mgt2;
    }
    if (testCase == 2){
        cout << "===== Testing - operatorot += ======" << endl;
        Race **rArray;
        cin >> m;
        rArray = new Race *[m];
        for (int i = 0; i<m; i++){
            cin >> choice;
            cin >> city;
            cin >> year;
            cin >> month;
            cin >> bestTime;
            cin >>length;
            if (choice == 1){
                rArray[i] = new Race(city, year, month, bestTime, length);
            }
            else{
                cin>>numberLaps;
                cin>>n;
                for (int j = 0; j < n; j++)
                    cin >> bestTimes[j];
                rArray[i] = new MotoGPRace(city, year, month, bestTime, length,bestTimes, n, numberLaps);
            }
        }
        // print the races
        cout << "\nList of all races:\n";
        for (int i = 0; i < m; i++)
            cout << *rArray[i];

        // add a new best time
        float best;
        cin >> best;
        int flag = 1;
        for (int i = 0; i < m; i++){
            MotoGPRace* nn = dynamic_cast<MotoGPRace*>(rArray[i]);
            if (nn != 0){
                flag = 0;
                try {
                    (*nn) += best;
                }
                catch (InvalidTime &e){
                    e.print();
                }
                break;
            }
        }

        // print the races
        cout << "\nLista na site Trki:\n";
        for (int i = 0; i < m; i++)
            cout << *rArray[i];
    }
    if (testCase == 3){
        cout << "===== Testing - exceptions ======" << endl;
        cin >> city;
        cin >> year;
        cin >> month;
        cin >> bestTime;
        cin>>length;
        cin>>numberLaps;
        MotoGPRace mgt(city, year, month, bestTime, length);
        mgt.setNumberLaps(numberLaps);
        float time1,time2;
        cin>>time1>>time2;

        try{
            mgt+=time1;
            mgt+=time2;
        }
        catch (InvalidTime &e){
            e.print();
        }
        cout<<mgt;
    }
    if (testCase == 4){
        cout <<"===== Testing - operator++ ======"<<endl;
        cin >> city;
        cin >> year;
        cin >> month;
        cin >> bestTime;
        cin>>length;
        cin>>numberLaps;
        cin>>n;
        for (int j = 0; j < n; j++)
            cin >> bestTimes[j];

        MotoGPRace mgt(city, year, month, bestTime, length,bestTimes,n,numberLaps);
        float v,koef2;
        cout<<(mgt++).getNumberLaps()<<endl;
        cout<<mgt;
        mgt++;
        cout<<mgt;
    }
    if (testCase == 5){
        cout << "===== Testing - coefficient ======" << endl;
        Race **rArray;
        cin >> m;
        rArray = new Race *[m];
        for (int i = 0; i<m; i++){
            cin >> choice;
            cin >> city;
            cin >> year;
            cin >> month;
            cin >> bestTime;
            cin >>length;
            if (choice == 1){
                rArray[i] = new Race(city, year, month, bestTime, length);
            }
            else{
                cin>>numberLaps;
                cin>>n;
                for (int j = 0; j < n; j++)
                    cin >> bestTimes[j];
                rArray[i] = new MotoGPRace(city, year, month, bestTime, length,bestTimes, n, numberLaps);
            }
        }
        // print the races
        cout << "\nList of all races:\n";
        for (int i = 0; i < m; i++)
            cout << *rArray[i];

        MotoGPRace::setK(0.7);
        // print the races
        cout << "\nList of all races:\n";
        for (int i = 0; i < m; i++)
            cout << *rArray[i];
    }

    if (testCase == 6){
        cout << "===== Testing - full functionality ======" << endl;
        Race **rArray;
        cin >> m;
        rArray = new Race *[m];
        for (int i = 0; i<m; i++){
            cin >> choice;
            cin >> city;
            cin >> year;
            cin >> month;
            cin >> bestTime;
            cin >>length;
            if (choice == 1){
                rArray[i] = new Race(city, year, month, bestTime, length);
            }
            else{
                cin>>numberLaps;
                cin>>n;
                for (int j = 0; j < n; j++)
                    cin >> bestTimes[j];
                rArray[i] = new MotoGPRace(city, year, month, bestTime, length,bestTimes, n, numberLaps);
            }
        }
        // print the races
        cout << "\nList of all races:\n";
        for (int i = 0; i < m; i++)
            cout << *rArray[i];
        float newCoef;
        cin>>newCoef;
        MotoGPRace::setK(newCoef);
        cout << "\nList of all races:\n";
        for (int i = 0; i < m; i++)
            cout << *rArray[i];
        // print the races
        float newBest;
        cin>>newBest;
        int flag = 1;
        for (int i = 0; i < m; i++){
            MotoGPRace * pok= dynamic_cast<MotoGPRace *>(rArray[i]);
            if(pok!=0)
            {
                (*pok)++;
                try {
                    (*pok) += newBest;
                }
                catch (InvalidTime &e){
                    e.print();
                }
                if(flag==1)
                {
                    flag = 0;
                    try {
                        *pok += 1.4;
                    }
                    catch (InvalidTime &e){
                        e.print();
                    }
                }
            }
        }
        cout << "\nList of the races:\n";
        for (int i = 0; i < m; i++)
            cout << *rArray[i];
    }

    return 0;
}
