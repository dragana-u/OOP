//Да се креира класа Customer за опишување на купувачи на една книжара. За секој купувач се чуваат податоци за:
//името (низа од 50 знаци),
//електронска адреса (низа од 50 знаци),
//вид на купувач (стандардни, лојални или вип),
//основен попуст (цел број изразен во проценти),
//дополнителен попуст (цел број изразен во проценти) и
//број на купени производи. (5 поени)
//Сите лојални купувачи со покажување на клуб картичка имаат право на основниот попуст при купување од книжарата.
//Основниот попуст е ист за сите лојални купувачи и изнесува 10%. Оваа вредност може да се смени со одлука на раководството на книжарата.
//Дополнителниот попуст е фиксен и може да го користат само вип купувачите и изнесува 20%. Стандардните купувачи немаат право на попуст (5 поени).
//За оваа класа да се имплементира оператор << за печатење на купувач во формат:
//[ime_na_kupuvac]
//[email_na_kupuvac]
//[broj_na_proizvodi]
//[vid_na_kupuvac] [popust_sto_moze_da_go_koristi]
//каде попустот е 0% ако купувачот е стандарден, вредноста на основниот попуст,
//ако е лојален или збир од основниот и дополнителниот попуст, ако купувачот е вип. (5 поени)
//Да се креира класа за онлајн книжара FINKI-bookstore во која се чува низа од регистрирани купувачи
//(динамички алоцирана низа) и број на купувачи. (5 поени) За класата да се обезбедат:
//operator+= (10 поени) за додавање купувач во листата од купувачи, но само ако веќе не е дел од неа
//(ако во листата нема купувач со иста електронска адреса). Ако во листата постои корисник со иста електронска адреса,
//треба да се генерира исклучок UserExistsException. Потребно е да се обезбеди справување со исклучокот во функцијата
//main на означеното место. Во ваква ситуација се печати порака "The user already exists in the list" (5 поени).
//Функција update со која сите стандардни купувачи со купени повеќе од 5 производи стануваат лојални,
//а сите лојални купувачи со над 10 купени производи, стануваат вип (5 поени).
//Оператор << за печатење на информациите за сите регистрирани купувачи (5 поени).
//Да се обезбедат сите дополнителни методи потребни за правилно функционирање на програмата. (10 поени)

#include <iostream>
#include <cstring>
using namespace std;
#define  MAX 100
enum typeC{
    standard,
    loyal,
    vip
};
class UserExistsException{
private:
    char msg[100];
public:
    UserExistsException() {
        strcpy(msg,"The user already exists in the list!\n\0");

    }
    void showMessage() {
        cout<<msg;
    }
};
class Customer{
protected:
    char ime[50];
    char email[50];
    typeC tip;
    static int osnovenPopust;
    static const int dopolnitelenPopust;
    int brKupeniProizvodi;
public:
    Customer(){}
    Customer(char *ime, char *email, typeC tip, int brKupeniProizvodi) {
        strcpy(this->ime,ime);
        strcpy(this->email,email);
        this->tip=tip;
        this->brKupeniProizvodi=brKupeniProizvodi;
    }
    // Customer(const Customer &copy) {
    //     strcpy(this->ime, copy.ime);
    //     strcpy(this->email, copy.email);
    //     this->tip = copy.tip;
    //     this->osnovenPopust = copy.osnovenPopust;
    //     this->brKupeniProizvodi = copy.brKupeniProizvodi;
    // }
    // Customer &operator=(const Customer &copy)
    // {
    //     if(this!=&copy) {
    //         strcpy(this->ime, copy.ime);
    //         strcpy(this->email, copy.email);
    //         this->tip = copy.tip;
    //         this->osnovenPopust = copy.osnovenPopust;
    //         this->brKupeniProizvodi = copy.brKupeniProizvodi;
    //     }
    //     return *this;
    // }
    static void setDiscount1(int op){
        osnovenPopust=op;
    }

    friend ostream &operator<<(ostream &os, const Customer &customer){
            os<<customer.ime<<endl;
            os<<customer.email<<endl;
            os<<customer.brKupeniProizvodi<<endl;
            if(customer.tip==standard){
                os<<"standard"<<" 0"<<endl;
            }else if(customer.tip==loyal){
                os<<"loyal "<<customer.osnovenPopust<<endl;
            }else if(customer.tip==vip){
                os<<"vip "<<customer.osnovenPopust+customer.dopolnitelenPopust<<endl;
            }
            return os;
    }

    typeC getTip(){
        return tip;
    }

    void setTip(typeC t){
        this->tip=t;
    }

    int getBrKupeniProizvodi(){
        return brKupeniProizvodi;
    }

    char *getEmail(){
        return email;
    }
};
int Customer::osnovenPopust=10;
const int Customer::dopolnitelenPopust=20;


class FINKI_bookstore : public Customer{
    Customer *kupuvac;
    int brojKupuvaci;
public:
    FINKI_bookstore(){

    }
    FINKI_bookstore(char *ime, char *email, typeC tip, int brKupeniProizvodi, Customer *kupuvac, int brojKupuvaci)
            : Customer(ime, email, tip, brKupeniProizvodi){
        this->brojKupuvaci=brKupeniProizvodi;
        this->kupuvac=new Customer[brKupeniProizvodi];
        for(int i=0;i<brKupeniProizvodi;i++){
            this->kupuvac[i]=kupuvac[i];
        }
    }
    ~FINKI_bookstore(){
        delete [] kupuvac;
    }

    void setCustomers(Customer pCustomer[MAX], int n) {
        kupuvac=new Customer[n];
        for(int i=0;i<n;i++){
            kupuvac[i]=pCustomer[i];
        }
        this->brojKupuvaci=n;
    }

    friend ostream &operator<<(ostream &os, const FINKI_bookstore &bookstore) {
        for(int i=0;i<bookstore.brojKupuvaci;i++){
            os<<bookstore.kupuvac[i];
        }
        return os;
    }

    void update() {
        for(int i=0;i<brojKupuvaci;i++){
            if(kupuvac[i].getTip()==standard && kupuvac[i].getBrKupeniProizvodi()>5){
                kupuvac[i].setTip(loyal);
            }else if(kupuvac[i].getTip()==loyal && kupuvac[i].getBrKupeniProizvodi()>10){
                kupuvac[i].setTip(vip);
            }
        }
    }

    FINKI_bookstore & operator +=(Customer &c){
        int flag=1;
        for(int i=0;i<brojKupuvaci;i++){
            if(strcmp(kupuvac[i].getEmail(),c.getEmail())==0){
                flag=0;
                throw UserExistsException();
            }
        }

        if(flag){
            Customer *temp = new Customer[brojKupuvaci+1];
            for(int i=0;i<brojKupuvaci;i++){
                temp[i]=kupuvac[i];
            }
            temp[brojKupuvaci++]=c;
            delete [] kupuvac;
            kupuvac = temp;
        }
        return *this;
    }
};

int main(){
    int testCase;
    cin >> testCase;

    char name[MAX];
    char email[MAX];
    int tC;
    int discount;
    int numProducts;


    if (testCase == 1){
        cout << "===== Test Case - Customer Class ======" << endl;
        cin.get();
        cin.getline(name,MAX);
        cin.getline(email,MAX);
        cin >> tC;
        cin >> numProducts;
        cout << "===== CONSTRUCTOR ======" << endl;
        Customer c(name, email, (typeC) tC, numProducts);
        cout << c;

    }

    if (testCase == 2){
        cout << "===== Test Case - Static Members ======" << endl;
        cin.get();
        cin.getline(name,MAX);
        cin.getline(email,MAX);
        cin >> tC;
        cin >> numProducts;
        cout << "===== CONSTRUCTOR ======" << endl;
        Customer c(name, email, (typeC) tC, numProducts);
        cout << c;

        c.setDiscount1(5);

        cout << c;
    }

    if (testCase == 3){
        cout << "===== Test Case - FINKI-bookstore ======" << endl;
        FINKI_bookstore fc;
        int n;
        cin >> n;
        Customer customers[MAX];
        for(int i = 0; i < n; ++i) {
            cin.get();
            cin.getline(name,MAX);
            cin.getline(email,MAX);
            cin >> tC;
            cin >> numProducts;
            Customer c(name, email, (typeC) tC, numProducts);
            customers[i] = c;
        }

        fc.setCustomers(customers, n);

        cout << fc <<endl;
    }

    if (testCase == 4){
        cout << "===== Test Case - operator+= ======" << endl;
        FINKI_bookstore fc;
        int n;
        cin >> n;
        Customer customers[MAX];
        for(int i = 0; i < n; ++i) {
            cin.get();
            cin.getline(name,MAX);
            cin.getline(email,MAX);
            cin >> tC;
            cin >> numProducts;
            Customer c(name, email, (typeC) tC, numProducts);
            customers[i] = c;
        }

        fc.setCustomers(customers, n);
        cout << "OPERATOR +=" << endl;
        cin.get();
        cin.getline(name,MAX);
        cin.getline(email,MAX);
        cin >> tC;
        cin >> numProducts;
        Customer c(name, email, (typeC) tC, numProducts);
        fc+=c;

        cout << fc;
    }

    if (testCase == 5){
        cout << "===== Test Case - operator+= (exception) ======" << endl;
        FINKI_bookstore fc;
        int n;
        cin >> n;
        Customer customers[MAX];
        for(int i = 0; i < n; ++i) {
            cin.get();
            cin.getline(name,MAX);
            cin.getline(email,MAX);
            cin >> tC;
            cin >> numProducts;
            Customer c(name, email, (typeC) tC, numProducts);
            customers[i] = c;
        }

        fc.setCustomers(customers, n);
        cout << "OPERATOR +=" << endl;
        cin.get();
        cin.getline(name,MAX);
        cin.getline(email,MAX);
        cin >> tC;
        cin >> numProducts;
        Customer c(name,email,(typeC) tC,numProducts);
        try {
            fc += c;
        }
        catch(UserExistsException &exception){
            exception.showMessage();
        }
        cout << fc;
    }

    if (testCase == 6){
        cout << "===== Test Case - update method  ======" << endl << endl;
        FINKI_bookstore fc;
        int n;
        cin >> n;
        Customer customers[MAX];
        for(int i = 0; i < n; ++i) {
            cin.get();
            cin.getline(name,MAX);
            cin.getline(email,MAX);
            cin >> tC;
            cin >> numProducts;
            Customer c(name, email, (typeC) tC, numProducts);
            customers[i] = c;
        }

        fc.setCustomers(customers, n);

        cout << "Update:" << endl;
        fc.update();
        cout << fc;
    }
    return 0;

}

