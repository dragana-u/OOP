//Издавачката куќа FINKI-Education издава онлајн и печатени книги. 
//За секоја книга се чуваат податоци за ISBN бројот (низа од најмногу 20 знаци), 
//насловот (низа од најмногу 50 знаци), авторот (низа од најмногу 30 знаци) и основната цена изразена во $ (реален број). 
//Класата за опишување на книгите е апстрактна (5 поени).
//За секоја онлајн книга дополнително се чуваат податоци за url од каде може да се симне 
//(динамички резервирана низа од знаци) и големината изразена во MB (цел број). За секоја печатена 
//книга дополнително се чуваат податоци за масата изразена во килограми (реален број) и дали ја има на залиха (логичка променлива). (5 поени)
//За секој објект од двете изведени класи треба да бидат на располагање следниве методи:
//Метод bookPrice, за пресметување на продажната цена на книгата на следниот начин: (10 поени)
//За онлајн книга - цената се зголемува за 20% од основната цена ако книгата е поголема од 20MB
//За печатена книга - цената се зголемува за 15% од основната цена ако масата на книгата е поголема од 0.7kg
//Преоптоварен оператор > за споредба на две книги од каков било вид според нивната цена. (5 поени)
//Преоптоварен оператор << за печатење на податоците за книгите во формат: (5 поени)
//Да се имплементира функција mostExpensiveBook со потпис:
//void mostExpensiveBook (Book** books, int n)
//во која се печати вкупниот број на онлајн, односно, печатени книги во проследената низа посебно. 
//(5 поени) Потоа се наоѓа и печати најскапата книга. (5 поени)

#include <iostream>
#include <cstring>
using namespace std;

class Book{
protected:
    char isbn[20];
    char naslov[50];
    char avtor[30];
    float osnovnaCena;
public:
    virtual float bookPrice()=0;

    Book &operator =(const Book &other){
        if(this!=&other){
            strcpy(this->isbn,other.isbn);
            strcpy(this->naslov, other.naslov);
            strcpy(this->avtor,other.avtor);
            this->osnovnaCena=other.osnovnaCena;
        }
        return *this;
    }

    Book(char *isbn="", char *naslov="", char *avtor="", float osnovnaCena=0){
        strcpy(this->isbn,isbn);
        strcpy(this->naslov, naslov);
        strcpy(this->avtor,avtor);
        this->osnovnaCena=osnovnaCena;
    }

    friend ostream &operator<<(ostream &os,Book &book) {
        os << book.isbn << ": " << book.naslov << ", " << book.avtor<<" "<<book.bookPrice()<<endl;
        return os;
    }

    bool operator>(Book &rhs)  {
        return osnovnaCena > rhs.bookPrice();
    }

    void setISBN(char *ISBN) {
        strcpy(this->isbn,ISBN);
    }
    Book(const Book &other){
        strcpy(this->isbn,other.isbn);
        strcpy(this->naslov, other.naslov);
        strcpy(this->avtor,other.avtor);
        this->osnovnaCena=other.osnovnaCena;
    }
};

class OnlineBook : public Book{
private:
    char *url;
    int mb;
public:
    OnlineBook(char *isbn="", char *naslov="", char *avtor="", float osnovnaCena=0, char *url="", int mb=0) : Book(isbn, naslov, avtor,
                                                                                                                   osnovnaCena){
        this->url=new char[strlen(url)+1];
        strcpy(this->url,url);
        this->mb=mb;
    }
    ~OnlineBook(){
        delete [] url;
    }
    float bookPrice(){
        if(mb>20){
            return ((20.0/100)*osnovnaCena)+osnovnaCena;
        }
        return osnovnaCena;
    }

    OnlineBook & operator = (const OnlineBook &other){
        if(this!=&other){
            this->mb=other.mb;
            this->url=new char[strlen(other.url)+1];
            strcpy(this->url,other.url);
            Book::operator=(other);
        }
        return *this;
    }

    OnlineBook(const Book &other, char *url, int mb) : Book(other), mb(mb) {
        this->url=new char[strlen(url)+1];
        strcpy(this->url,url);
    }
};

class PrintBook : public Book{
private:
    float masa;
    bool daliZaliha;
public:
    PrintBook(char *isbn="", char *naslov="", char *avtor="", float osnovnaCena=0, float masa=0, bool daliZaliha= false) :
            Book(isbn,naslov,
                 avtor,
                 osnovnaCena),
            masa(masa),daliZaliha(daliZaliha) {

    }
    float bookPrice(){
        if(masa>0.7){
            return ((15.0/100)*osnovnaCena)+osnovnaCena;
        }
        return osnovnaCena;
    }
    PrintBook & operator=(const PrintBook&other){
        if(this!=&other){
            this->masa=other.masa;
            this->daliZaliha=other.daliZaliha;
        }
        return *this;
    }

    PrintBook(const Book &other, float masa, bool daliZaliha) : Book(other), masa(masa), daliZaliha(daliZaliha) {

    }
};

void mostExpensiveBook (Book** books, int n){
    int online=0,print=0;
    int najI;
    float expensive=books[0]->bookPrice();
    for(int i=0;i<n;i++){
        OnlineBook *ob = dynamic_cast<OnlineBook*>(books[i]);
        if(ob!=0){
            online++;
        }else{
            print++;
        }
        if(books[i]->bookPrice()>expensive){
            expensive=books[i]->bookPrice();
            najI=i;
        }
    }
    cout<<"FINKI-Education"<<endl;
    cout<<"Total number of online books: "<<online<<endl;
    cout<<"Total number of print books: "<<print<<endl;
    cout<<"The most expensive book is:"<<endl;
    cout<<*books[najI];
}

int main(){

    char isbn[20], title[50], author[30], url[100];
    int size, tip;
    float price, weight;
    bool inStock;
    Book  **books;
    int n;

    int testCase;
    cin >> testCase;

    if (testCase == 1){
        cout << "====== Testing OnlineBook class ======" << endl;
        cin >> n;
        books = new Book *[n];

        for (int i = 0; i < n; i++){
            cin >> isbn;
            cin.get();
            cin.getline(title, 50);
            cin.getline(author, 30);
            cin >> price;
            cin >> url;
            cin >> size;
            cout << "CONSTRUCTOR" << endl;
            books[i] = new OnlineBook(isbn, title, author, price, url, size);
            cout << "OPERATOR <<" << endl;
            cout << *books[i];
        }
        cout << "OPERATOR >" << endl;
        cout << "Rezultat od sporedbata e: " << endl;
        if (*books[0] > *books[1])
            cout << *books[0];
        else
            cout << *books[1];
    }
    if (testCase == 2){
        cout << "====== Testing OnlineBook CONSTRUCTORS ======" << endl;
        cin >> isbn;
        cin.get();
        cin.getline(title, 50);
        cin.getline(author, 30);
        cin >> price;
        cin >> url;
        cin >> size;
        cout << "CONSTRUCTOR" << endl;
        OnlineBook ob1(isbn, title, author, price, url, size);
        cout << ob1 << endl;
        cout << "COPY CONSTRUCTOR" << endl;
        OnlineBook ob2(ob1);
        cin >> isbn;
        ob2.setISBN(isbn);
        cout << ob1 << endl;
        cout << ob2 << endl;
        cout << "OPERATOR =" << endl;
        ob1 = ob2;
        cin >> isbn;
        ob2.setISBN(isbn);
        cout << ob1 << endl;
        cout << ob2 << endl;
    }
    if (testCase == 3){
        cout << "====== Testing PrintBook class ======" << endl;
        cin >> n;
        books = new Book *[n];

        for (int i = 0; i < n; i++){
            cin >> isbn;
            cin.get();
            cin.getline(title, 50);
            cin.getline(author, 30);
            cin >> price;
            cin >> weight;
            cin >> inStock;
            cout << "CONSTRUCTOR" << endl;
            books[i] = new PrintBook(isbn, title, author, price, weight, inStock);
            cout << "OPERATOR <<" << endl;
            cout << *books[i];
        }
        cout << "OPERATOR >" << endl;
        cout << "Rezultat od sporedbata e: " << endl;
        if (*books[0] > *books[1])
            cout << *books[0];
        else
            cout << *books[1];
    }
    if (testCase == 4){
        cout << "====== Testing method mostExpensiveBook() ======" << endl;
        cin >> n;
        books = new Book *[n];

        for (int i = 0; i<n; i++){

            cin >> tip >> isbn;
            cin.get();
            cin.getline(title, 50);
            cin.getline(author, 30);
            cin >> price;
            if (tip == 1) {

                cin >> url;
                cin >> size;

                books[i] = new OnlineBook(isbn, title, author, price, url, size);

            }
            else {
                cin >> weight;
                cin >> inStock;

                books[i] = new PrintBook(isbn, title, author, price, weight, inStock);
            }
        }

        mostExpensiveBook(books, n);
    }

    for (int i = 0; i<n; i++) delete books[i];
    delete[] books;
    return 0;
}

