Потребно е да се имплементира класа за компјутерска игра (Game), што содржи информации за:
//име на играта (низа од макс. 100 знаци)
//цена на играта (децимален број)
//дали е играта купена на распродажба (bool променлива).
//Од класата Game да се изведе класа SubscriptionGame, што дополнително ќе чува:
//месечен надоместок за играње (децимален број).
//датум кога играта е купена (месец и година како позитивни цели броеви)
//За класите Game и SubscriptionGame да се преоптоварат операторите за печатење (<<) и читање (>>).
//Да се дефинира и операторот == кој ќе споредува игри според нивното име.
//Да се дефинира класа за корисник (User) во која се чуваат:
//кориснично име на корисникот (низа од макс. 100 знаци)
//колекција од игри кои се купени од корисникот (динамички алоцирана низа).
//Да се преоптовари операторот += кој ќе овозможи додавање на нова игра во колекцијата на игри.
//Притоа ако корисникот ја има веќе купено играта, потребно е да се креира исклучок од типот ExistingGame.
//Класата за имплементација на исклучоци потребно е има соодветен конструктор и метода message за печатење на порака на екран.
//Да се креира и метода total_spent() во класата User која ќе пресметува колку пари корисникот потрошил за својата колекција од игри.
//Доколку играта е купена на распродажба, цената на играта е 30% од стандарната цена. Доколку играта е од типот SubscriptionGame,
//        потребно е да се вкалкулира и сумата потрошена за месечниот надоместок (број_на_изминати_месеци x цена_на_месечен_надоместок)
//без да се земе во предвид моменталниот месец (мај 2018).
//Да се преоптовари и оператоторот за печатење на корисникот, која печати информации во сл. формат (види тест примери 7 до 12):
//User: username
//- Game: PUBG, regular price: $70, bought on sale
//- Game: Half Life 2, regular price: $70 - Game: Warcraft 4, regular price: $40, monthly fee: $10, purchased: 1-2017
//Листа на дел од методите со нивни прототипови кои се користат во main:
//ЕxistingGame::message()
//Game::operator==(Game&)
//User::operator+=(Game&)
//User::get_game(int)
//User::total_spent(int)
//User::get_name()
//User::get_games_number()

#include <iostream>
#include <cstring>
using namespace std;

class ExistingGame{
public:
    ExistingGame(){

    }
    void message(){
        cout<<"The game is already in the collection"<<endl;
    };
};

class Game{
protected:
    char ime[100];
    float price;
    bool isSale;
//    void copy(const Game &other){
//        this->price=other.price;
//        this->isSale=other.isSale;
//        strncpy(this->ime,other.ime,100);
//    }
public:
//    Game(const Game &other){
//        copy(other);
//    }
//    Game &operator=(const Game &other){
//        if(this!=&other){
//            copy(other);
//        }
//        return *this;
//    }
    Game(char *ime="", float price=0.0, bool isSale= false){
        this->price=price;
        this->isSale=isSale;
        strncpy(this->ime,ime,99);
        this->ime[99]='\0';
    }

    friend ostream &operator<<(ostream &os,Game &game) {
        os << "Game: " <<game.ime<<", regular price: $"<<game.price;
        if(game.isSale){
            os<<", bought on sale";
        }
        return os;
    }
    friend istream & operator>>(istream & is, Game &g){

        is.get();
        is.getline(g.ime,100);
        is>>g.price>>g.isSale;

        return is;
    }

    bool operator==( Game &rhs){
        if(strcmp(ime,rhs.ime)==0){
            return true;
        }else return false;
    }

    virtual float getPrice(){
        if(isSale){
            return price * 0.3F;
        }
        return price;
    }

    bool isSale1(){
        return isSale;
    }
};
class SubscriptionGame : public Game{
protected:
    float mesecenNadomestok;
    int mesec;
    int godina;
//    void copy(const SubscriptionGame &other){
//        this->mesec=other.mesec;
//        this->mesecenNadomestok=other.mesecenNadomestok;
//        this->godina=other.godina;
//    }
public:
    SubscriptionGame(){
        ime[0]='\0';
    }
    SubscriptionGame(char *ime, float price, bool isSale, float mesecenNadomestok, int mesec, int godina) : Game(ime,
                                                                                                                 price,
                                                                                                                 isSale),
                                                                                                            mesecenNadomestok(
                                                                                                                    mesecenNadomestok),
                                                                                                            mesec(mesec),
                                                                                                            godina(godina) {

    }
//    SubscriptionGame(const SubscriptionGame &other){
//        copy(other);
//    }

    friend ostream &operator<<(ostream &os,SubscriptionGame &game) {
        Game *tmp = dynamic_cast<Game*>(&game);
        os<<*tmp;
        os<<", monthly fee: $"<<game.mesecenNadomestok<<", purchased: "<<game.mesec<<"-"<<game.godina<<endl;
        return os;
    }
    friend istream & operator>>(istream & is, SubscriptionGame &g){
        is.get();
        is.getline(g.ime,100);
        is>>g.price>>g.isSale;
        is>>g.mesecenNadomestok >> g.mesec >> g.godina;
        return is;
    }
//    SubscriptionGame & operator=(const SubscriptionGame &other){
//        if(this!=&other){
//            copy(other);
//        }
//        return *this;
//    }
    float getPrice(){
        float price=Game::getPrice();
        int months=0;
        if(godina<2018){
            months = (12-mesec)+(2017-godina)*12 +5;
        }else{
            months=5-mesec;
        }
        price+=months*mesecenNadomestok;
        return price;
    }

};

class User{
protected:
    char username[100];
    Game ** games;
    int num;
private:
    void obj_copy(const User * orig, User * cpy){
        strcpy(cpy->username, orig->username);
        cpy->num = orig->num;

        cpy->games = new Game*[cpy->num];

        for (int i=0; i< cpy->num; ++i){
            cpy->games[i] = new Game(*(orig->games[i]));
        }
    }
public:
    char const * const get_username(){
        return this->username;
    }
    int get_games_number(){
        return this->num;
    }
    ~User(){
        for (int i=0; i < this->num; ++i){
            delete this->games[i];
        }
        delete [] games;
    }
    User(const User &other){
        obj_copy(&other,this);
    }
    User &operator=(const User &other){
        if (&other != this){

            for (int i=0; i < this->num; ++i){
                delete other.games[i];
            }

            delete [] other.games;

            obj_copy(&other, this);
        }
        return *this;
    }
    User(char const * const username=""){
        strncpy(this->username,username,99);
        this->username[99]='\0';
        this->num=0;
        this->games=0;
    }
    User & operator+=(Game &g){

        Game ** new_games = new Game*[this->num+1];

        for (int i=0; i < (this->num); ++i) {
            if ( (*(this->games[i])) == g){
                throw ExistingGame();
            }

            new_games[i] = games[i];
        }

        for (int i=0; i < (this->num); ++i) {
            new_games[i] = games[i];
        }

        SubscriptionGame * sg = dynamic_cast< SubscriptionGame* >(&g);

        if(sg){

            new_games[num] = new SubscriptionGame(*sg);
        }
        else {
            //cout<<"Game"<<endl;
            new_games[num] = new Game(g);
        }

        delete [] this->games;
        this->games = new_games;
        this->num++;

        //cout<<"User: "<< this->username<<endl;

//    for (int i=0; i<this->num_games;++i){
//        cout<< *(this->games[i]);
//    }

        return *this;
    }
    Game& get_game(int i){
        return (*(this->games[i]));
    }
    float total_spent(){
        float sum=0.0f;
        for(int i=0;i<num;i++){
            sum+=games[i]->getPrice();
        }
        return sum;
    }

   friend  ostream & operator<<(ostream & o, User& u) {

        o<<"\nUser: "<<u.get_username()<<"\n";

        for (int i=0; i < u.get_games_number(); ++i){
            Game * g;
            SubscriptionGame * sg;
            g = &(u.get_game(i));

            sg = dynamic_cast<SubscriptionGame *> (g);

            if (sg){
                cout<<"- "<<(*sg);
            }
            else {
                cout<<"- "<<(*g);
            }
            cout<<"\n";
        }
        return o;
    }
};
int main() {
    int test_case_num;

    cin>>test_case_num;

    // for Game
    char game_name[100];
    float game_price;
    bool game_on_sale;

    // for SubscritionGame
    float sub_game_monthly_fee;
    int sub_game_month, sub_game_year;

    // for User
    char username[100];
    int num_user_games;

    if (test_case_num == 1){
        cout<<"Testing class Game and operator<< for Game"<<std::endl;
        cin.get();
        cin.getline(game_name,100);
        //cin.get();
        cin>>game_price>>game_on_sale;

        Game g(game_name, game_price, game_on_sale);

        cout<<g;
    }
    else if (test_case_num == 2){
        cout<<"Testing class SubscriptionGame and operator<< for SubscritionGame"<<std::endl;
        cin.get();
        cin.getline(game_name, 100);

        cin>>game_price>>game_on_sale;

        cin>>sub_game_monthly_fee;
        cin>>sub_game_month>>sub_game_year;

        SubscriptionGame sg(game_name, game_price, game_on_sale, sub_game_monthly_fee, sub_game_month, sub_game_year);
        cout<<sg;
    }
    else if (test_case_num == 3){
        cout<<"Testing operator>> for Game"<<std::endl;
        Game g;

        cin>>g;

        cout<<g;
    }
    else if (test_case_num == 4){
        cout<<"Testing operator>> for SubscriptionGame"<<std::endl;
        SubscriptionGame sg;

        cin>>sg;

        cout<<sg;
    }
    else if (test_case_num == 5){
        cout<<"Testing class User and operator+= for User"<<std::endl;
        cin.get();
        cin.getline(username,100);
        User u(username);

        int num_user_games;
        int game_type;
        cin >>num_user_games;

        try {

            for (int i=0; i<num_user_games; ++i){

                cin >> game_type;

                Game *g;
                // 1 - Game, 2 - SubscriptionGame
                if (game_type == 1){
                    cin.get();
                    cin.getline(game_name, 100);

                    cin>>game_price>>game_on_sale;
                    g = new Game(game_name, game_price, game_on_sale);
                }
                else if (game_type == 2){
                    cin.get();
                    cin.getline(game_name, 100);

                    cin>>game_price>>game_on_sale;

                    cin>>sub_game_monthly_fee;
                    cin>>sub_game_month>>sub_game_year;
                    g = new SubscriptionGame(game_name, game_price, game_on_sale, sub_game_monthly_fee, sub_game_month, sub_game_year);
                }

                //cout<<(*g);


                u+=(*g);
            }
        }catch(ExistingGame &ex){
            ex.message();
        }

        cout<<u;

//    cout<<"\nUser: "<<u.get_username()<<"\n";

//    for (int i=0; i < u.get_games_number(); ++i){
//        Game * g;
//        SubscriptionGame * sg;
//        g = &(u.get_game(i));

//        sg = dynamic_cast<SubscriptionGame *> (g);

//        if (sg){
//          cout<<"- "<<(*sg);
//        }
//        else {
//          cout<<"- "<<(*g);
//        }
//        cout<<"\n";
//    }

    }
    else if (test_case_num == 6){
        cout<<"Testing exception ExistingGame for User"<<std::endl;
        cin.get();
        cin.getline(username,100);
        User u(username);

        int num_user_games;
        int game_type;
        cin >>num_user_games;

        for (int i=0; i<num_user_games; ++i){

            cin >> game_type;

            Game *g;
            // 1 - Game, 2 - SubscriptionGame
            if (game_type == 1){
                cin.get();
                cin.getline(game_name, 100);

                cin>>game_price>>game_on_sale;
                g = new Game(game_name, game_price, game_on_sale);
            }
            else if (game_type == 2){
                cin.get();
                cin.getline(game_name, 100);

                cin>>game_price>>game_on_sale;

                cin>>sub_game_monthly_fee;
                cin>>sub_game_month>>sub_game_year;
                g = new SubscriptionGame(game_name, game_price, game_on_sale, sub_game_monthly_fee, sub_game_month, sub_game_year);
            }

            //cout<<(*g);

            try {
                u+=(*g);
            }
            catch(ExistingGame &ex){
                ex.message();
            }
        }

        cout<<u;

//      for (int i=0; i < u.get_games_number(); ++i){
//          Game * g;
//          SubscriptionGame * sg;
//          g = &(u.get_game(i));

//          sg = dynamic_cast<SubscriptionGame *> (g);

//          if (sg){
//            cout<<"- "<<(*sg);
//          }
//          else {
//            cout<<"- "<<(*g);
//          }
//          cout<<"\n";
//      }
    }
    else if (test_case_num == 7){
        cout<<"Testing total_spent method() for User"<<std::endl;
        cin.get();
        cin.getline(username,100);
        User u(username);

        int num_user_games;
        int game_type;
        cin >>num_user_games;

        for (int i=0; i<num_user_games; ++i){

            cin >> game_type;

            Game *g;
            // 1 - Game, 2 - SubscriptionGame
            if (game_type == 1){
                cin.get();
                cin.getline(game_name, 100);

                cin>>game_price>>game_on_sale;
                g = new Game(game_name, game_price, game_on_sale);
            }
            else if (game_type == 2){
                cin.get();
                cin.getline(game_name, 100);

                cin>>game_price>>game_on_sale;

                cin>>sub_game_monthly_fee;
                cin>>sub_game_month>>sub_game_year;
                g = new SubscriptionGame(game_name, game_price, game_on_sale, sub_game_monthly_fee, sub_game_month, sub_game_year);
            }

            //cout<<(*g);


            u+=(*g);
        }

        cout<<u;

        cout<<"Total money spent: $"<<u.total_spent()<<endl;
    }
}
