//Фирмата FINKI Cloud има потреба од решение за управување со image датотеките од различните оперативни 
//системи кои ги користат при сетирање на нови сервери. За таа цел потребно е да се дефинираат следниве класи:
//OperativenSistem
//Во класата OperativenSistem треба да се чуваат следниве податоци:
//име на оперативниот систем (динамички алоцирана низа од знаци)
//верзија (float)
//тип (енумерација со можни вредности LINUX, UNIX, WINDOWS)
//големина (во GB) (float)
//Дополнително, во рамките на класата потребно е да се дефинира:
//конструктори со и без параметри
//copy constructor
//destructor
//преоптоварување на операторот =
//метод за печатење на информациите - void pecati() (видете го излезот од тест примерите за структурата)
//метод за проверка на еднаквост помеѓу два оперативни системи (два оперативни системи се еднакви ако имаат исто име, верзија, тип и големина) 
//- bool ednakviSe(const OperativenSistem &os)
//метод за споредба на верзии помеѓу два оперативни система - int sporediVerzija(const OperativenSistem &os), 
//кој ќе враќа 0 доколку верзиите се исти, -1 доколку верзијата на оперативниот систем од аргументот е поголема и 1 во преостанатиот случај.
//метод за проверка дали два оперативни системи се од иста фамилија. Два оперативни системи се од 
//иста фамилија доколку имаат исто име и се од ист тип. bool istaFamilija(const OperativenSistem &sporedba)
//Repozitorium
//Во класата Repozitorium треба да се чуваат следниве податоци:
//име на репозиториумот (низа од 20 знака)
//динамички алоцирана низа од OperativenSistem
//број на оперативни системи кои моментално се наоѓаат во репозиториумот (int)
//Дополнително, во рамките на класата потребно е да се дефинира:
//конструктор Repozitorium(const char *ime)
//деструктор
//метод void pecatiOperativniSistemi() кој ќе ги печати сите оперативни системи кои се дел од репозиториумот
//метод void izbrishi(const OperativenSistem &operativenSistem) кој ќе го избрише оперативниот систем проследен како аргумент,
//доколку тој се наоѓа во репозиториумот. Да се користи методот ednakviSe за споредба на два оперативни система.
//метод за додавање на оперативен систем (void dodadi(const OperativenSistem &nov)) кој ќе го има следново однесување:
//Доколку веќе постои оперативен систем од иста фамилија (да се користи методот за проверка на фамилија) кој е постар од проследениот оперативен систем, 
//тогаш постоечкиот оперативен систем се заменува со новиот.
//Во секој друг случај, проследениот оперативен систем се додава како дополнителен во репозиториумот.


#include <iostream>
#include <cstring>
using namespace std;
enum Tip{
    LINUX,
    UNIX,
    WINDOWS
};
class OperativenSistem{
    char *imeOS;
    float verzija;
    Tip tip;
    float goleminaGB;
    void copy(const OperativenSistem &other){
        this->verzija=other.verzija;
        this->goleminaGB=other.goleminaGB;
        this->tip=other.tip;
        this->imeOS = new char [strlen(other.imeOS)+1];
        strcpy(this->imeOS,other.imeOS);
    }
public:

    OperativenSistem(char *imeOS="", float verzija=0, Tip tip=LINUX, float goleminaGB=0) {
        this->verzija=verzija;
        this->goleminaGB=goleminaGB;
        this->tip=tip;
        this->imeOS = new char [strlen(imeOS)+1];
        strcpy(this->imeOS,imeOS);
    }
    ~OperativenSistem(){
        delete [] imeOS;
    }
    OperativenSistem(const OperativenSistem &other){
        copy(other);
    }
    OperativenSistem & operator = (const OperativenSistem &other){
        if(this!=&other){
            delete [] imeOS;
            copy(other);
        }
        return *this;
    }
    void pecati(){
        cout<<"Ime: "<<imeOS<<" Verzija: "<<verzija<<" Tip: "<<tip<<" Golemina:"<<goleminaGB<<"GB";
        cout<<endl;
    }
    bool ednakviSe(const OperativenSistem &os){
        if(strcmp(this->imeOS,os.imeOS)==0 && this->verzija==os.verzija &&
                this->tip==os.tip && this->goleminaGB==os.goleminaGB){
            return true;
        }else return false;
    }
    int sporediVerzija(const OperativenSistem &os){
        if(verzija==os.verzija){
            return 0;
        }else if(os.verzija>verzija){
            return -1;
        }else{
            return 1;
        }
    }
    bool istaFamilija(const OperativenSistem &sporedba){
        if(strcmp(imeOS,sporedba.imeOS)==0 && tip==sporedba.tip){
            return true;
        }  else return false;
    }

    float getVerzija() const {
        return verzija;
    }
};

class Repozitorium{
    char name[20];
    OperativenSistem *os;
    int brOs;
    void copy(const Repozitorium &other){
        strcpy(this->name,other.name);
        this->brOs=other.brOs;
        this->os=new OperativenSistem [other.brOs];
        for(int i=0;i<brOs;i++){
            os[i]=other.os[i];
        }
    }
public:

    Repozitorium(char *name="") {
        strcpy(this->name,name);
        this->brOs=0;
        this->os=new OperativenSistem [brOs];
    }
    ~Repozitorium(){
        delete [] os;
    }
    Repozitorium(const Repozitorium &other){
        copy(other);
    }
    Repozitorium & operator = (const Repozitorium &other){
        if(this!=&other){
            delete [] os;
            copy(other);
        }
        return *this;
    }
    void pecatiOperativniSistemi(){
        cout<<"Repozitorium: "<<name<<endl;
        for(int i=0;i<brOs;i++){
            os[i].pecati();
        }
    }

    void dodadi(const OperativenSistem &nov) {
        for(int i=0;i<brOs;i++){
            if(os[i].istaFamilija(nov)){
                if(os[i].getVerzija()<nov.getVerzija()){
                    os[i]=nov;
                    return;
                }
            }
        }
        OperativenSistem *temp = new OperativenSistem [brOs+1];
        for(int i=0;i<brOs;i++){
            temp[i]=os[i];
        }
        temp[brOs++]=nov;
        delete [] os;
        os = temp;
    }

    void izbrishi(const OperativenSistem &operativenSistem) {
        OperativenSistem *temp = new OperativenSistem [brOs+1];
        int j=0;
        for(int i=0;i<brOs;i++){
            if(!os[i].ednakviSe(operativenSistem)){
                temp[j++]=os[i];
            }
        }
        delete [] os;
        os = temp;
        brOs=j;
    }
};

int main() {
    char repoName[20];
    cin>>repoName;
    Repozitorium repozitorium=Repozitorium(repoName);
    int brojOperativniSistemi = 0;
    cin>>brojOperativniSistemi;
    char ime[20];
    float verzija;
    int tip;
    float golemina;
    for (int i = 0; i<brojOperativniSistemi; i++){
        cin>>ime;
        cin>>verzija;
        cin>>tip;
        cin>>golemina;
        OperativenSistem os = OperativenSistem(ime, verzija, (Tip)tip, golemina);
        repozitorium.dodadi(os);
    }

    repozitorium.pecatiOperativniSistemi();
    cin>>ime;
    cin>>verzija;
    cin>>tip;
    cin>>golemina;
    OperativenSistem os = OperativenSistem(ime, verzija, (Tip)tip, golemina);
    cout<<"=====Brishenje na operativen sistem====="<<endl;
    repozitorium.izbrishi(os);
    repozitorium.pecatiOperativniSistemi();
    return 0;
}
