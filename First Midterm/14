//Потребно е да се имплементираат класи File (датотека) и Folder (директориум) за работа со едноставен податочен систем.
//Во класата File треба да се чуваат следниве податоци:
//Име на датотеката (динамички алоцирана низа од знаци)
//Екстензија на датотеката (енумерација со можни вредности: txt, pdf, exe)
//Име на сопственикот на датотеката (динамички алоцирана низа од знаци)
//Големина на датотеката (цел број на мегабајти)
//Дополнително, во класата потребно е да се напишат и:
//Конструктор без параметри
//Конструктор со параметри
//Конструктор за копирање
//Деструктор
//Преоптоварување на операторот =
//Метод за печатење на информациите за една датотека (видете го излезот од тест примерите за структурата на печатење) - print()
//Метод за проверка на еднаквост помеѓу две датотеки со потпис bool equals(const File & that) 
//кој ќе враќа true ако датотеките имаат исто име, екстензија и сопственик
//Метод за споредба на типот помеѓу две датотеки со потпис bool equalsType(const File & that) 
//кој ќе враќа true ако датотеките се од ист тип, т.е. имаат исто име и екстензија
//Во класата Folder треба да се чуваат следниве податоци:
//Име на директориумот (динамички алоцирана низа од знаци)
//Број на датотеки во него (на почеток директориумот е празен)
//Динамички алоцирана низа од датотеки, објекти од класата File
//Дополнително, во класата потребно е да се напишат и:
//Конструктор со потпис Folder(const char* name)
//Деструктор
//Метод за печатење на информациите за еден директориум (видете го излезот од тест примерите за структурата на печатење) - print()
//Метод за бришење на датотека од директориумот со потпис void remove(const File & file) 
//кој ќе ја избрише првата датотека од директориумот која е еднаква според equals методот
//Метод за додавање на датотека во директориумот со потпис void add(const File & file) кој ќе додава датотеката во директориумот

#include<iostream>
#include<cstring>
using namespace std;
enum Extension{
    pdf,
    txt,
    exe
};
class File{
    char *nameOfFile;
    Extension ext;
    char *nameOfOwner;
    int goleminaMB;
    void copy(const File &other){
        this->goleminaMB=other.goleminaMB;
        this->ext=other.ext;
        this->nameOfFile=new char[strlen(other.nameOfFile)+1];
        strcpy(this->nameOfFile,other.nameOfFile);
        this->nameOfOwner=new char[strlen(other.nameOfOwner)+1];
        strcpy(this->nameOfOwner,other.nameOfOwner);
    }
public:
    File(char *nameOfFile="", char *nameOfOwner="", int goleminaMB=0, Extension ext=pdf){
        this->goleminaMB=goleminaMB;
        this->ext=ext;
        this->nameOfFile=new char[strlen(nameOfFile)+1];
        strcpy(this->nameOfFile,nameOfFile);
        this->nameOfOwner=new char[strlen(nameOfOwner)+1];
        strcpy(this->nameOfOwner,nameOfOwner);
    }
    File(const File &other){
        copy(other);
    }
    File & operator=(const File &other){
        if(this!=&other){
            delete [] nameOfOwner;
            delete [] nameOfFile;
            copy(other);
        }
        return *this;
    }
    ~File(){
        delete [] nameOfFile;
        delete [] nameOfOwner;
    }
    void print(){
        cout<<"File name: "<<nameOfFile;
        if(ext==pdf){
            cout<<".pdf"<<endl;
        }else if(ext==txt){
            cout<<".txt"<<endl;
        }else if(ext==exe){
            cout<<".exe"<<endl;
        }
        cout<<"File owner: "<<nameOfOwner<<endl;
        cout<<"File size: "<<goleminaMB<<endl;
    }
    bool equals(const File &that){
        if(that.ext==ext &&
        strcmp(that.nameOfOwner,nameOfOwner)==0 && strcmp(that.nameOfFile,nameOfFile)==0){
            return true;
        }else return false;
    }
    bool equalsType(const File &that){
        if(strcmp(that.nameOfFile,nameOfFile)==0 && that.ext==ext){
            return true;
        }else return false;
    }
};

class Folder{
    char *imeDirektorium;
    int numOfFiles;
    File *files;
public:
    Folder(const char *imeDirektorium=""){
        this->imeDirektorium=new char[strlen(imeDirektorium)+1];
        strcpy(this->imeDirektorium,imeDirektorium);
        numOfFiles=0;
        this->files = new File[numOfFiles];
    }
    ~Folder(){
        delete [] files;
        delete [] imeDirektorium;
    }
    void print(){
        cout<<"Folder name: "<<imeDirektorium<<endl;
        for(int i=0;i<numOfFiles;i++){
            files[i].print();
        }
    }
    void remove(const File & file){
        int j=0;
        for(int i=0;i<numOfFiles;i++){
           if(!files[i].equals(file)){
               files[j++]=files[i];
           }
        }
        numOfFiles=j;
    }
    void add(const File & file){
        File *temp = new File [numOfFiles+1];
        for(int i=0;i<numOfFiles;i++){
            temp[i]=files[i];
        }
        temp[numOfFiles++]=file;
        delete [] files;
        files=temp;
    }
};

int main() {
    char fileName[20];
    char fileOwner[20];
    int ext;
    int fileSize;

    int testCase;
    cin >> testCase;
    if (testCase == 1) {
        cout << "======= FILE CONSTRUCTORS AND = OPERATOR =======" << endl;
        cin >> fileName;
        cin >> fileOwner;
        cin >> fileSize;
        cin >> ext;

        File created = File(fileName, fileOwner, fileSize, (Extension) ext);
        File copied = File(created);
        File assigned = created;

        cout << "======= CREATED =======" << endl;
        created.print();
        cout << endl;
        cout << "======= COPIED =======" << endl;
        copied.print();
        cout << endl;
        cout << "======= ASSIGNED =======" << endl;
        assigned.print();
    }
    else if (testCase == 2) {
        cout << "======= FILE EQUALS & EQUALS TYPE =======" << endl;
        cin >> fileName;
        cin >> fileOwner;
        cin >> fileSize;
        cin >> ext;

        File first(fileName, fileOwner, fileSize, (Extension) ext);
        first.print();

        cin >> fileName;
        cin >> fileOwner;
        cin >> fileSize;
        cin >> ext;

        File second(fileName, fileOwner, fileSize, (Extension) ext);
        second.print();

        cin >> fileName;
        cin >> fileOwner;
        cin >> fileSize;
        cin >> ext;

        File third(fileName, fileOwner, fileSize, (Extension) ext);
        third.print();

        bool equals = first.equals(second);
        cout << "FIRST EQUALS SECOND: ";
        if (equals)
            cout << "TRUE" << endl;
        else
            cout << "FALSE" << endl;

        equals = first.equals(third);
        cout << "FIRST EQUALS THIRD: ";
        if (equals)
            cout << "TRUE" << endl;
        else
            cout << "FALSE" << endl;

        bool equalsType = first.equalsType(second);
        cout << "FIRST EQUALS TYPE SECOND: ";
        if (equalsType)
            cout << "TRUE" << endl;
        else
            cout << "FALSE" << endl;

        equalsType = second.equals(third);
        cout << "SECOND EQUALS TYPE THIRD: ";
        if (equalsType)
            cout << "TRUE" << endl;
        else
            cout << "FALSE" << endl;

    }
    else if (testCase == 3) {
        cout << "======= FOLDER CONSTRUCTOR =======" << endl;
        cin >> fileName;
        Folder folder(fileName);
        folder.print();

    }
    else if (testCase == 4) {
        cout << "======= ADD FILE IN FOLDER =======" << endl;
        char name[20];
        cin >> name;
        Folder folder(name);

        int iter;
        cin >> iter;

        while (iter > 0) {
            cin >> fileName;
            cin >> fileOwner;
            cin >> fileSize;
            cin >> ext;

            File file(fileName, fileOwner, fileSize, (Extension) ext);
            folder.add(file);
            iter--;
        }
        folder.print();
    }
    else {
        cout << "======= REMOVE FILE FROM FOLDER =======" << endl;
        char name[20];
        cin >> name;
        Folder folder(name);

        int iter;
        cin >> iter;

        while (iter > 0) {
            cin >> fileName;
            cin >> fileOwner;
            cin >> fileSize;
            cin >> ext;

            File file(fileName, fileOwner, fileSize, (Extension) ext);
            folder.add(file);
            iter--;
        }
        cin >> fileName;
        cin >> fileOwner;
        cin >> fileSize;
        cin >> ext;

        File file(fileName, fileOwner, fileSize, (Extension) ext);
        folder.remove(file);
        folder.print();
    }
    return 0;
}
