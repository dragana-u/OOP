//Да се дефинира класа IceCream во која се чуваат податоци за:
//име (динамичка низа од знаци),
//состав (низа од знаци, најмногу 100)
//цена (децимален број),
//попуст (цел број, изразен во проценти) иницијална вредност 0.
//За потребите на класата да се имплементираат:
//соодветни конструктори и деструктор (да се погледнат повиците во функцијата main)
//оператор << за печатење на податоците за сладоледот во следниов формат:
//име: состав цена [цена на попуст]
//делот „цена на попуст“ се печати само ако за сладоледот се нуди попуст (вредноста на попустот е поголема од нула)
//оператор ++ во префикс нотација за зголемување на попустот за 5
//оператор + - за собирање на објект од класата IceCream со низа од знаци. Собирањето се реализира на начин
//што името на новиот сладолед се добива со спојување на името на сладоледот и низата од знаци одделени со „ + “. 
//Цената на новиот сладолед се зголемува за 10, а попустот и составот на сладоледот остануваат исти.
//метод void setDiscount(int discount) со кој може да се смени вредноста на попустот. Дозволените вредности на попустот се во интервалот [0,100]
//метод void setName(char* name) со кој се менува името на сладоледот.
//Да се креира класа IceCreamShop во која се чува:
//име на продавницата (низа од знаци, најмногу 50)
//динамички резервирано поле од објекти од класата IceCream
//број на сладоледи во полето (цел број).
//За оваа класа да се обезбедат:
//соодветни конструктори и деструктор (погледнете ги повиците во main функцијата)
//оператор += за додавање нов објект од класата IceCream во полето
//оператор << за печатење на листа од сите сладоледи во продавницата. 
//Прво се печати името на продавницата, а потоа се печатат податоците за сите сладоледи одделени со нов ред.

#include <iostream>
#include <cstring>
using namespace std;

class IceCream{
    char *ime;
    char sostav[100];
    float cena;
    int popust;
    void copy(const IceCream &other){
        this->cena=other.cena;
        this->popust=other.popust;
        this->ime=new char[strlen(other.ime)+1];
        strcpy(this->ime,other.ime);
        strcpy(this->sostav,other.sostav);
    }
public:
    IceCream(char *ime="", char *sostav="", float cena=0){
        this->cena=cena;
        this->popust=0;
        this->ime=new char[strlen(ime)+1];
        strcpy(this->ime,ime);
        strcpy(this->sostav,sostav);
    }

    IceCream(const IceCream &other){
        copy(other);
    }

    IceCream & operator = (const IceCream &other){
        if(this!=&other){
            delete [] ime;
            copy(other);
        }
        return *this;
    }

    friend ostream &operator<<(ostream &os, const IceCream &cream) {
        os << cream.ime << ": " << cream.sostav << " " << cream.cena << " ";
        if(cream.popust>0){
            os<<"("<<cream.cena * (100 - cream.popust) / 100<<")";
        }
        return os;
    }

    IceCream operator+(const char* extra){
        char *newName = new char [strlen(ime)+ strlen(extra)+4];
        strcat(newName,ime);
        strcat(newName," + ");
        strcat(newName,extra);
        IceCream novo(newName,sostav,cena+10);
        novo.setDiscount(popust);
        return novo;
    }

    ~IceCream(){
        delete [] ime;
    }
    void setDiscount(int p) {
        this->popust = p;
    }
    IceCream & operator ++(){
        popust+=5;
        return *this;
    }
    void setName(char *name) {
        this->ime=new char [strlen(name)+1];
        strcpy(this->ime,name);
    }
};

class IceCreamShop{
    char ime[50];
    IceCream *creams;
    int brSladoledi;
    void copy(const IceCreamShop &other){
        strcpy(this->ime,other.ime);
        this->brSladoledi=other.brSladoledi;
        this->creams=new IceCream [brSladoledi];
        for(int i=0;i<brSladoledi;i++){
            this->creams[i]=other.creams[i];
        }
    }
public:
    IceCreamShop(char *ime="") {
        strcpy(this->ime,ime);
        this->brSladoledi=0;
        this->creams= nullptr;
    }
    IceCreamShop(const IceCreamShop &other){
        copy(other);
    }
    ~IceCreamShop(){
        delete [] creams;
    }
    IceCreamShop & operator +=(const IceCream &nov ){
        IceCream *temp = new IceCream [brSladoledi+1];
        for(int i=0;i<brSladoledi;i++){
            temp[i]=creams[i];
        }
        temp[brSladoledi++]=nov;
        delete [] creams;
        creams=temp;
        return *this;
    }

    friend ostream &operator<<(ostream &os, const IceCreamShop &shop) {
        os << shop.ime<<endl;
        for(int i=0;i<shop.brSladoledi;i++){
            os<<shop.creams[i]<<endl;
        }
        return os;
    }
};

int main() {
    char name[100];
    char ingr[100];
    float price;
    int discount;

    int testCase;

    cin >> testCase;
	cin.get();
    if(testCase == 1) {
        cout << "====== TESTING IceCream CLASS ======" << endl;
        cin.getline(name,100);
        cin.getline(ingr,100);
        cin >> price;
        cin >> discount;
        cout << "CONSTRUCTOR" << endl;
        IceCream ic1(name, ingr, price);
        ic1.setDiscount(discount);
        cin.get();
        cin.getline(name,100);
        cin.getline(ingr,100);
        cin >> price;
        cin >> discount;
        IceCream ic2(name, ingr, price);
        ic2.setDiscount(discount);
        cout << "OPERATOR <<" << endl;
        cout << ic1 << endl;
        cout << ic2 << endl;
        cout << "OPERATOR ++" << endl;
        ++ic1;
        cout << ic1 << endl;
        cout << "OPERATOR +" << endl;
        IceCream ic3 = ic2 + "chocolate";
        cout << ic3 << endl;
    } else if(testCase == 2) {
        cout << "====== TESTING IceCream CONSTRUCTORS ======" << endl;
        cin.getline(name,100);
        cin.getline(ingr,100);
        cin >> price;
        cout << "CONSTRUCTOR" << endl;
        IceCream ic1(name, ingr, price);
        cout << ic1 << endl;
        cout << "COPY CONSTRUCTOR" << endl;
        IceCream ic2(ic1);
        cin.get();
        cin.getline(name,100);
        ic2.setName(name);
        cout << ic1 << endl;
        cout << ic2 << endl;
        cout << "OPERATOR =" << endl;
        ic1 = ic2;
        cin.getline(name,100);
        ic2.setName(name);
        cout << ic1 << endl;
        cout << ic2 << endl;

        cin >> discount;
        ic1.setDiscount(discount);


    }
    else if(testCase == 3) {
        cout << "====== TESTING IceCreamShop ======" << endl;
        char icsName[50];
        cin.getline(icsName,100);
        cout << "CONSTRUCTOR" << endl;
        IceCreamShop ics(icsName);
        int n;
        cin >> n;
        cout << "OPERATOR +=" << endl;
        for(int i = 0; i < n; ++i) {
            cin.get();
            cin.getline(name,100);
        	cin.getline(ingr,100);
            cin >> price;
            IceCream ic(name, ingr, price);
            ics += ic;
        }
        cout << ics;
    } else if(testCase == 4) {
        cout << "====== TESTING IceCreamShop CONSTRUCTORS ======" << endl;
        char icsName[50];
        cin.getline(icsName,100);
        IceCreamShop ics(icsName);
        int n;
        cin >> n;
        for(int i = 0; i < n; ++i) {
            cin.get();
            cin.getline(name,100);
        	cin.getline(ingr,100);
            cin >> price;
            IceCream ic(name, ingr, price);
            ics += ic;
        }
        IceCream x("FINKI fruits", "strawberry ice cream, raspberry ice cream, blueberry ice cream", 60);
        IceCreamShop icp = ics;
        ics+=x;
        cout << ics << endl;
        cout << icp << endl;
    }


    return 0;
}
