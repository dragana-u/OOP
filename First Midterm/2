//Да се имплементира класа List во којашто ќе се чуваат информации за:
//броеви што се дел од листата (динамички алоцирана низа од цели броеви)
//бројот на броеви што се дел од листата
//За класата да се дефинираат следните методи:
//конструктор (со аргументи), copy-конструктор, деструктор, оператор =
//void pecati()метод што ќе ги печати информациите за листата во форматот: [број на елементи во листата]: x1 x2 .. xn sum: [сума] average: [просек]
//int sum() метод што ја враќа сумата на елементите во листата
//double average() метод што ќе го враќа просекот на броевите во листата
//Дополнително, креирајте класата ListContainer, во која што ќе се чуваат информации за:
//низа од листи (динамички алоцирана низа од објекти од класата List)
//број на елементи во низата од листи (цел број)
//број на обиди за додавање на листа во контејнерот (цел број првично поставен на нула)
//За класата потребно е да ги дефинирате следните методи:
//конструктор (default), copy-конструктор, деструктор, оператор =
//void pecati() метод што ќе ги печати информациите за контејнерот во форматот: 
//List number: [реден број на листата] List info: [испечатени информации за листата со методот List::pecati()] \n sum: [сума] average: [просек]
//доколку контејнерот е празен се печати само порака The list is empty.
//void addNewList(List l) метод со којшто се додава листа во контејнерот
//Напомена: една листа се додава во контејнерот ако и само ако има различна сума од сите листи што се веќе додадени во контејнерот
//int sum() метод што ја враќа сумата на сите елементи во сите листи
//double average() метод што го враќа просекот на сите елементи во сите листи во контејнерот

#include <iostream>
#include <cstring>
using namespace std;

class List{
    int *broevi;
    int numOfBroevi;
    void copy(const List &list){
        this->numOfBroevi=list.numOfBroevi;
        this->broevi=new int [list.numOfBroevi];
        for(int i=0;i<numOfBroevi;i++){
            this->broevi[i]=list.broevi[i];
        }
    }
public:
    List(){
        numOfBroevi=0;
    }
    List(int *broevi, int numOfBroevi){
        this->numOfBroevi=numOfBroevi;
        this->broevi=new int [numOfBroevi];
        for(int i=0;i<numOfBroevi;i++){
            this->broevi[i]=broevi[i];
        }
    }
    List(const List &list){
        copy(list);
    }
    List & operator = (const List &list){
        if(this!=&list){
            delete [] broevi;
            copy(list);
        }
        return *this;
    }

    ~List(){
        delete [] broevi;
    }
    int sum(){
        int sum=0;
        for(int i=0;i<numOfBroevi;i++){
            sum+=broevi[i];
        }
        return sum;
    }
    double average(){
        return ((double)sum()/numOfBroevi);
    }
    void pecati(){
        cout<<numOfBroevi<<": ";
        for(int i=0;i<numOfBroevi;i++){
            cout<<broevi[i]<<" ";
        }
        cout<<"sum: "<<sum()<<" average: "<<average()<<endl;
    }

    int getNumOfBroevi() const {
        return numOfBroevi;
    }
};

class ListContainer{
    List *listi;
    int brNaElementi;
    int brNaObidi;
    int brNeuspesni;
    void copy(const ListContainer &listContainer){
        this->brNeuspesni=listContainer.brNeuspesni;
        this->brNaElementi=listContainer.brNaElementi;
        this->brNaObidi=listContainer.brNaObidi;
        this->listi = new List [listContainer.brNaElementi];
        for(int i=0;i<brNaElementi;i++){
            this->listi[i]=listContainer.listi[i];
        }
    }
public:
    ListContainer(){
        brNaElementi=brNaObidi=brNeuspesni=0;
        this->listi = new List [brNaElementi];
        listi = nullptr;
    }
    ListContainer(const ListContainer &listContainer){
        copy(listContainer);
    }
    ListContainer & operator = (const ListContainer &listContainer){
        if(this!=&listContainer) {
            delete[] listi;
            copy(listContainer);
        }
        return *this;
    }
    ~ListContainer(){
        delete [] listi;
    }
    int sum(){
        int sum=0;
        for(int i=0;i<brNaElementi;i++){
            sum+=listi[i].sum();
        }
        return sum;
    }
    double average(){
        int vkListi=0;
        for(int i=0;i<brNaElementi;i++){
            vkListi+=listi[i].getNumOfBroevi();
        }
        return ((double)sum()/vkListi);
    }
    void print(){
        if(brNaObidi==0){
            cout<<"The list is empty"<<endl;
            return;
        }
        for(int i=0;i<brNaElementi;i++){
            cout<<"List number: "<<i+1<<" List info: ";
            listi[i].pecati();
        }
        cout<<"Sum: "<<sum()<<" Average: "<<average()<<endl;
        cout<<"Successful attempts: "<<brNaObidi<<" Failed attempts: "<<brNeuspesni<<endl;
    }
    void addNewList(List list) {
        for(int i=0;i<brNaElementi;i++){
            if(list.sum()==listi[i].sum()){
                brNeuspesni++;
                return;
            }
        }
        List *temp = new List [brNaElementi+1];
        for(int i=0;i<brNaElementi;i++){
            temp[i]=listi[i];
        }
        temp[brNaElementi++]=list;
        delete [] listi;
        listi = temp;
        brNaObidi++;
    }
};

int main() {

    ListContainer lc;
    int N;
    cin>>N;

    for (int i=0;i<N;i++) {
        int n;
        int niza[100];

        cin>>n;

        for (int j=0;j<n;j++){
            cin>>niza[j];

        }

        List l=List(niza,n);

        lc.addNewList(l);
    }


    int testCase;
    cin>>testCase;

    if (testCase==1) {
        cout<<"Test case for operator ="<<endl;
        ListContainer lc1;
        lc1.print();
        cout<<lc1.sum()<<" "<<lc.sum()<<endl;
        lc1=lc;
        lc1.print();
        cout<<lc1.sum()<<" "<<lc.sum()<<endl;
        lc1.sum();
        lc1.average();

    }
    else {
        lc.print();
    }
}
