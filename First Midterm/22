//Да се креира структура Proizvod во која се чуваат податоци за кодот напрозиводот (низа од 20 знаци), единична цена на производ (цел број), 
//бројот на достапни производи кои ги има во еден магацин (цел број) .
//Потоа да се креирa структура Narachka во која се чуваат податоци за името лицето кое ја 
//прави нарачката (низи од 15 знаци), низа од Proizvodi (максимум 10) кои ги има во нарачката, 
//низа од бројот на нарачани производи за секоја производ посебно (максимум10) и бројот на производи во нарачката .
//Треба да се направи функција со потпис
//void pecatiFaktura(Narachka n)
//која што ќе ги отпечати една фактура за една нарачка (n) .
//Во фактурата во првиот ред се печати: Faktura za XXXXX, каде XXXXX е името на лицето кое ја прави нарачката.
//Ако сите производи може да се нарачаат печатат нарачаните производи, подредени по азбучен ред според кодот на производот. 
//Во следните редови, во секој ред посебно се печати кодот на производот, единична цена на производот, 
//број на нарачани производи и вкупната цена на производот (сите се одделени со едно празно место) . 
//Исто така бројот на достапни производи од тој производ да се ажурира (да се намали за бројот на нарачани производи од тој производ). 
//Во последниот ред да се отпечати: Vkupnata suma na fakturata e XXX, каде XXX е вкупната сума за цените за сите нарачани производи.
//Ако постои производ кој не може да биде нарачан затоа што во магацинот не се достапни нарачаниот 
//број производи тогаш не може да се изготви фактура за нарачката. На екранот да се отпечати: Fakturata ne moze da se izgotvi.

#include <stdio.h>
#include <string.h>

typedef struct Proizvod{
    char kod[20];
    int edinecnaCena;
    int brDostapniProizvodi;
}Proizvod;

typedef struct Narachka{
    char ime[15];
    Proizvod nizaProizvodi[10];
    int niza[10];
    int brProizvodi;
}Narachka;


void pecatiFaktura(Narachka n){
    struct Proizvod tmp;
    printf("Faktura za %s\n",n.ime);
    for(int i=0;i<n.brProizvodi;i++){
        if(n.nizaProizvodi[i].brDostapniProizvodi<n.niza[i]){
            printf("Fakturata ne moze da se izgotvi");
            return;
        }
    }
    for( int i=0; i<n.brProizvodi; i++) {
        for (int j = 0; j < n.brProizvodi; j++) {
            if (strcmp(n.nizaProizvodi[i].kod, n.nizaProizvodi[j].kod) < 0)    //Sporeduvanje kod
            {
                tmp = n.nizaProizvodi[i];
                n.nizaProizvodi[i] = n.nizaProizvodi[j];
                n.nizaProizvodi[j] = tmp;
            }
        }
    }
    int suma=0;
    for(int j=0;j<n.brProizvodi;j++){
        printf("%s %d %d ",n.nizaProizvodi[j].kod,n.nizaProizvodi[j].edinecnaCena,n.niza[j]);
        printf("%d\n",n.niza[j]*n.nizaProizvodi[j].edinecnaCena);
        suma+=n.niza[j]*n.nizaProizvodi[j].edinecnaCena;
    }
    printf("Vkupnata suma na fakturata e %d",suma);
}

int main() {

    Narachka narachka;
    // внеси го името лицето кое ја прави нарачката
    scanf("%s %d",narachka.ime,&narachka.brProizvodi);
    // внеси го бројот на порачани производи во нарачката
    int i;
    //за секој од нарачаните производи се внесуваат информации
    for (i = 0; i < narachka.brProizvodi; ++i) {
        // внеси код
        scanf("%s",narachka.nizaProizvodi[i].kod);
        // внеси единицчна цена
        scanf("%d",&narachka.nizaProizvodi[i].edinecnaCena);
        // внеси број на производи во магацин
        scanf("%d",&narachka.nizaProizvodi[i].brDostapniProizvodi);
    }
    //за секој производ се внесува колку такви производи се порачани во нарачката
    int j;
    for (j = 0; j < narachka.brProizvodi; ++j) {
        //се внесува број на производи во нарачката
        scanf("%d",&narachka.niza[j]);
    }


    // повик на функцијата pecatiFaktura
    pecatiFaktura(narachka);

    return 0;
}
